name: CI Pipeline
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Lint
        run: npm run lint

  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Run Type Check
        run: npm run typecheck

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'postgres_test' }}
          POSTGRES_DB: blog_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci

      - name: Create environment files
        run: |
         
          # Create db .env
          cat > packages/db/.env << EOL
          DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/blog_app_test
          EOL
          
          # Create admin app .env - using secrets
          cat > apps/admin/.env << EOL
          ADMIN=${{ secrets.ADMIN_USERNAME }}
          PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOL
        
      - name: Setup Database Schema
        run: |
          cd packages/db
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/blog_app_test

      - name: Build Web App
        run: npm run build --workspace=apps/web
        
      - name: Build Admin App
        run: npm run build --workspace=apps/admin
  
  playwright:
    name: Playwright Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [build]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: blog_app_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create environment files
      run: |
        # Create db .env for Playwright tests
        cat > packages/db/.env << EOL
        DATABASE_URL=postgresql://postgres:${{ secrets.POSTGRES_PASSWORD || 'postgres_test' }}@localhost:5432/blog_app_test
        EOL
        
        # Create admin app .env - using secrets
        cat > apps/admin/.env << EOL
        ADMIN=${{ secrets.ADMIN_USERNAME }}
        PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        EOL

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Setup Database Schema for tests
      run: |
        cd packages/db
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/blog_app_test
      
    - name: Run Playwright tests
      run: npm test-all
      
    - uses: actions/upload-artifact@v4
      if: ${{ always() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Notify on failure
      if: ${{ failure() }}
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '❌ CI tests failed. Please check the [Playwright report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).'
          })
